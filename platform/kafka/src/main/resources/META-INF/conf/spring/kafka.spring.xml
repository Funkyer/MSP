<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/integration/kafka
       http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- commons config -->
    <bean id="stringSerializer" class="org.apache.kafka.common.serialization.StringSerializer"/>
    <bean id="kafkaEncoder" class="org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaEncoder">
        <constructor-arg value="java.lang.String" />
    </bean>
    <bean id="kafkaMessageEncoder" class="com.funkyer.kafka.common.KafkaSerializer">
        <property name="serializer" ref="common.JdkSerializerSpi"/>
            </bean>
    <bean id="producerProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="topic.metadata.refresh.interval.ms">3600000</prop>
                <prop key="message.send.max.retries">3</prop>
                <prop key="serializer.class">kafka.serializer.StringEncoder</prop>
                <prop key="request.required.acks">1</prop>
                <prop key="send.buffer.bytes">5242880</prop>
            </props>
        </property>
    </bean>

    <!-- topic test config  -->

    <int:channel id="kafkaInputChannel">
        <int:queue />
    </int:channel>

    <int-kafka:outbound-channel-adapter
            id="kafkaOutboundChannelAdapterTopicTest" kafka-producer-context-ref="producerContextTopic"
            auto-startup="true" channel="kafkaInputChannel" order="3">
        <int:poller fixed-delay="1000" time-unit="MILLISECONDS"
                    receive-timeout="1" task-executor="taskExecutor" />
    </int-kafka:outbound-channel-adapter>
    <task:executor id="taskExecutor" pool-size="5"
                   keep-alive="120" queue-capacity="500" />

    <int-kafka:producer-context id="producerContextTopic"
                                producer-properties="producerProperties">
        <int-kafka:producer-configurations>
            <!-- 多个topic配置 -->
            <int-kafka:producer-configuration
                    broker-list="localhost:9092,192.168.1.103:9092,192.168.1.103:9093"
                    key-serializer="stringSerializer"
                    value-class-type="com.funkyer.kafka.KeyMessage"
                    value-serializer="kafkaMessageEncoder"
                    topic="test" />
            <int-kafka:producer-configuration
                    broker-list="localhost:9092,192.168.1.103:9092,192.168.1.103:9093"
                    key-serializer="stringSerializer"
                    value-class-type="com.funkyer.kafka.KeyMessage"
                    value-serializer="kafkaMessageEncoder"
                    topic="test1"/>
        </int-kafka:producer-configurations>
    </int-kafka:producer-context>

    <bean id="kafka.producer" class="com.funkyer.kafka.service.impl.KafkaProducerSpi">
        <property name="channel" ref="kafkaInputChannel"/>
    </bean>



    <!-- topic test conf -->
    <int:channel id="outPutFromKafka" >
        <int:dispatcher task-executor="kafkaMessageExecutor" />
    </int:channel>
    <!-- zookeeper配置 可以配置多个 -->
    <int-kafka:zookeeper-connect id="zookeeperConnect"
                                 zk-connect="192.168.1.102:2181" zk-connection-timeout="6000"
                                 zk-session-timeout="6000" zk-sync-time="2000" />
    <!-- channel配置 auto-startup="true"  否则接收不发数据 -->
    <int-kafka:inbound-channel-adapter
            id="kafkaInboundChannelAdapter" kafka-consumer-context-ref="consumerContext"
            auto-startup="true" channel="outPutFromKafka">
        <int:poller fixed-delay="1" time-unit="MILLISECONDS" />
    </int-kafka:inbound-channel-adapter>
    <task:executor id="kafkaMessageExecutor" pool-size="8" keep-alive="120" queue-capacity="500" />
    <bean id="kafkaDecoder"
          class="org.springframework.integration.kafka.serializer.common.StringDecoder" />
    <bean id="kafkaMessageDecoder" class="com.funkyer.kafka.common.KafkaDecoder">
        <property name="serializer" ref="common.JdkSerializerSpi"/>
            </bean>

    <bean id="consumerProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="auto.offset.reset">smallest</prop>
                <prop key="socket.receive.buffer.bytes">10485760</prop> <!-- 10M -->
                <prop key="fetch.message.max.bytes">5242880</prop>
                <prop key="auto.commit.interval.ms">1000</prop>
            </props>
        </property>
    </bean>
    <!-- 消息接收的BEEN -->
    <bean id="kafkaConsumerService" class="com.funkyer.kafka.service.impl.KafkaConsumerSpi" />
    <!-- 指定接收的方法 -->
    <int:outbound-channel-adapter channel="outPutFromKafka"
                                  ref="kafkaConsumerService" method="processMessage" />

    <int-kafka:consumer-context id="consumerContext"
                                consumer-timeout="1000" zookeeper-connect="zookeeperConnect"
                                consumer-properties="consumerProperties">
        <int-kafka:consumer-configurations>
            <int-kafka:consumer-configuration
                    group-id="consumer1" value-decoder="kafkaMessageDecoder" key-decoder="kafkaDecoder"
                    max-messages="5000">
                <!-- 两个TOPIC配置 -->
                <int-kafka:topic id="test"  streams="4" />
                <int-kafka:topic id="test1" streams="4" />
            </int-kafka:consumer-configuration>
        </int-kafka:consumer-configurations>
    </int-kafka:consumer-context>
</beans>
